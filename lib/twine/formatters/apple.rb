module Twine
  module Formatters
    class Apple < Abstract
      def format_name
        'apple'
      end

      def extension
        '.strings'
      end

      def can_handle_directory?(path)
        Dir.entries(path).any? { |item| /^.+\.lproj$/.match(item) }
      end

      def default_file_name
        'Localizable.strings'
      end

      def default_plurals_file_name
        'Localizable.stringsdict'
      end

      def determine_language_given_path(path)
        path_arr = path.split(File::SEPARATOR)
        path_arr.each do |segment|
          match = /^(.+)\.lproj$/.match(segment)
          if match
            if match[1] == "Base"
              return @options[:developer_language]
            else
              return match[1]
            end
          end
        end

        return super
      end

      def output_path_for_language(lang)
        "#{lang}.lproj"
      end

      def format_header(lang)
        "/**\n * Apple Strings File\n * Generated by Twine #{Twine::VERSION}\n * Language: #{lang}\n */"
      end

      def format_plurals_header(lang)
        "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n" +
        "<!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">\n" +
        "<!-- Apple Stringsdict File -->\n" +
        "<!-- Generated by Twine #{Twine::VERSION} -->\n" +
        "<!-- Language: #{lang} -->\n" +
        "<plist version=\"1.0\">\n" +
        "<dict>\n"
      end

      def format_section_header(section, handlePlurals)
        if handlePlurals
            "\t<!-- SECTION: #{section.name} -->"
        else
          "/********** #{section.name} **********/\n"
        end
      end

      def format_section(section, lang, handlePlurals)
        result = "" 
        result += super + "\n"
      end

      def key_value_pattern
        "\"%{key}\" = \"%{value}\";\n"
      end

      def format_comment(definition, lang)
        "/* #{definition.comment.gsub('*/', '* /')} */\n" if definition.comment
      end

      def format_key(key)
        escape_quotes(key)
      end

      def format_value(value)
        escape_quotes(value)
      end

      def format_pluralized_value(key, pluralValues, lang)
        result = "      <key>#{key}</key>\n" +
        "      <dict>\n" +
        "        <key>NSStringLocalizedFormatKey</key>\n" +
        "        <string>%\#@text@</string>\n" +
        "        <key>text</key>\n" +
        "        <dict>\n" +
        "          <key>NSStringFormatSpecTypeKey</key>\n" +
        "          <string>NSStringPluralRuleType</string>\n" +
        "          <key>NSStringFormatValueTypeKey</key>\n"+
        "          <string>d</string>\n"

        pluralValues.each do |key, value|
          result += "          <key>#{escape_quotes(key)}</key>\n" +
                    "          <string>#{escape_quotes(value)}</string>\n"
        end
  
        result += "        </dict>\n" +
                "      </dict>\n"
      end
    end
  end
end

Twine::Formatters.formatters << Twine::Formatters::Apple.new
